//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Чайный Гриб\Programming\проект\myLovelyProject\myLovelyProject\arithmetic.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class arithmeticParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, TRUE=2, FALSE=3, NAMEIDENTIFIER=4, INT=5, DOUBLE=6, LPAREN=7, 
		RPAREN=8, PLUS=9, MINUS=10, TIMES=11, DIV=12, AND=13, OR=14, NOT=15, BOOLEQ=16, 
		POINT=17, SEMI=18, WS=19, UNEXPECTED=20;
	public const int
		RULE_file = 0, RULE_expression = 1, RULE_atom = 2, RULE_bool = 3, RULE_true = 4, 
		RULE_false = 5, RULE_identifier = 6, RULE_nameIdentifier = 7, RULE_typeIdentifier = 8, 
		RULE_function = 9, RULE_variable = 10, RULE_number = 11, RULE_int = 12, 
		RULE_double = 13;
	public static readonly string[] ruleNames = {
		"file", "expression", "atom", "bool", "true", "false", "identifier", "nameIdentifier", 
		"typeIdentifier", "function", "variable", "number", "int", "double"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'true'", "'false'", null, null, null, "'('", "')'", "'+'", 
		"'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", "'=='", "'.'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "TRUE", "FALSE", "NAMEIDENTIFIER", "INT", "DOUBLE", "LPAREN", 
		"RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "AND", "OR", "NOT", "BOOLEQ", 
		"POINT", "SEMI", "WS", "UNEXPECTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "arithmetic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static arithmeticParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public arithmeticParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public arithmeticParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(arithmeticParser.Eof, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(arithmeticParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(arithmeticParser.SEMI, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; expression(0);
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 29; Match(SEMI);
				State = 30; expression(0);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext left;
		public ExpressionContext evalue;
		public IToken op;
		public AtomContext avalue;
		public ExpressionContext right;
		public ITerminalNode LPAREN() { return GetToken(arithmeticParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(arithmeticParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(arithmeticParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(arithmeticParser.MINUS, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(arithmeticParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(arithmeticParser.NOT, i);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(arithmeticParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(arithmeticParser.DIV, 0); }
		public ITerminalNode PLUS() { return GetToken(arithmeticParser.PLUS, 0); }
		public ITerminalNode AND() { return GetToken(arithmeticParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(arithmeticParser.OR, 0); }
		public ITerminalNode BOOLEQ() { return GetToken(arithmeticParser.BOOLEQ, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 39; Match(LPAREN);
				State = 40; _localctx.evalue = expression(0);
				State = 41; Match(RPAREN);
				}
				break;
			case 2:
				{
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 43;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==NOT) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 46;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==MINUS || _la==NOT );
				State = 48; Match(LPAREN);
				State = 49; _localctx.evalue = expression(0);
				State = 50; Match(RPAREN);
				}
				break;
			case 3:
				{
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MINUS || _la==NOT) {
					{
					{
					State = 52;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==NOT) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 58; _localctx.avalue = atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 72;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 70;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 61;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 62;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 63; _localctx.right = expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 64;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 65;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 66; _localctx.right = expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 67;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 68;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << BOOLEQ))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 69; _localctx.right = expression(5);
						}
						break;
					}
					} 
				}
				State = 74;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 4, RULE_atom);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; number();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; @bool();
				}
				break;
			case NAMEIDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public TrueContext @true() {
			return GetRuleContext<TrueContext>(0);
		}
		public FalseContext @false() {
			return GetRuleContext<FalseContext>(0);
		}
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 6, RULE_bool);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; @true();
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; @false();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(arithmeticParser.TRUE, 0); }
		public TrueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_true; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueContext @true() {
		TrueContext _localctx = new TrueContext(Context, State);
		EnterRule(_localctx, 8, RULE_true);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FalseContext : ParserRuleContext {
		public ITerminalNode FALSE() { return GetToken(arithmeticParser.FALSE, 0); }
		public FalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_false; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FalseContext @false() {
		FalseContext _localctx = new FalseContext(Context, State);
		EnterRule(_localctx, 10, RULE_false);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; nameIdentifier();
			State = 89; typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		public ITerminalNode NAMEIDENTIFIER() { return GetToken(arithmeticParser.NAMEIDENTIFIER, 0); }
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterNameIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitNameIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_nameIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(NAMEIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeIdentifier);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(arithmeticParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(arithmeticParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(LPAREN);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NAMEIDENTIFIER) | (1L << INT) | (1L << DOUBLE) | (1L << LPAREN) | (1L << MINUS) | (1L << NOT))) != 0)) {
				{
				State = 98; expression(0);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 99; Match(T__0);
					State = 100; expression(0);
					}
					}
					State = 105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 108; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 22, RULE_number);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; @int();
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; @double();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(arithmeticParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 24, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(arithmeticParser.DOUBLE, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		public override void EnterRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IarithmeticListener typedListener = listener as IarithmeticListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarithmeticVisitor<TResult> typedVisitor = visitor as IarithmeticVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 26, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(DOUBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', '{', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\"', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '%', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '/', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\x30', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x38', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', ';', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'>', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', 'I', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'L', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'Q', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'U', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x62', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', 'h', '\n', '\v', '\f', '\v', '\xE', '\v', 'k', '\v', '\v', 
		'\x5', '\v', 'm', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 'u', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x3', 
		'\x4', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x6', '\x4', '\x2', '\f', 
		'\f', '\x11', '\x11', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\v', '\f', 
		'\x4', '\x2', '\xF', '\x10', '\x12', '\x12', '\x2', '{', '\x2', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '=', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'P', '\x3', '\x2', '\x2', '\x2', '\b', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'V', '\x3', '\x2', '\x2', '\x2', '\f', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'Z', '\x3', '\x2', '\x2', '\x2', '\x10', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x61', '\x3', '\x2', '\x2', '\x2', '\x14', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x16', 'p', '\x3', '\x2', '\x2', '\x2', '\x18', 
		't', '\x3', '\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', 'x', '\x3', '\x2', '\x2', '\x2', '\x1E', '#', '\x5', '\x4', '\x3', 
		'\x2', '\x1F', ' ', '\a', '\x14', '\x2', '\x2', ' ', '\"', '\x5', '\x4', 
		'\x3', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', 
		'\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', 
		'\x2', '\x2', '\x2', '$', '&', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\a', '\x2', '\x2', '\x3', '\'', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '(', ')', '\b', '\x3', '\x1', '\x2', ')', 
		'*', '\a', '\t', '\x2', '\x2', '*', '+', '\x5', '\x4', '\x3', '\x2', '+', 
		',', '\a', '\n', '\x2', '\x2', ',', '>', '\x3', '\x2', '\x2', '\x2', '-', 
		'/', '\t', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\t', '\x2', '\x2', '\x33', 
		'\x34', '\x5', '\x4', '\x3', '\x2', '\x34', '\x35', '\a', '\n', '\x2', 
		'\x2', '\x35', '>', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\t', 
		'\x2', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x5', 
		'\x6', '\x4', '\x2', '=', '(', '\x3', '\x2', '\x2', '\x2', '=', '.', '\x3', 
		'\x2', '\x2', '\x2', '=', '\x39', '\x3', '\x2', '\x2', '\x2', '>', 'J', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\f', '\b', '\x2', '\x2', '@', '\x41', 
		'\t', '\x3', '\x2', '\x2', '\x41', 'I', '\x5', '\x4', '\x3', '\t', '\x42', 
		'\x43', '\f', '\a', '\x2', '\x2', '\x43', '\x44', '\t', '\x4', '\x2', 
		'\x2', '\x44', 'I', '\x5', '\x4', '\x3', '\b', '\x45', '\x46', '\f', '\x6', 
		'\x2', '\x2', '\x46', 'G', '\t', '\x5', '\x2', '\x2', 'G', 'I', '\x5', 
		'\x4', '\x3', '\a', 'H', '?', '\x3', '\x2', '\x2', '\x2', 'H', '\x42', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x45', '\x3', '\x2', '\x2', '\x2', 'I', 
		'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'Q', '\x5', '\x18', 
		'\r', '\x2', 'N', 'Q', '\x5', '\b', '\x5', '\x2', 'O', 'Q', '\x5', '\xE', 
		'\b', '\x2', 'P', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'U', '\x5', '\n', '\x6', '\x2', 'S', 'U', '\x5', 
		'\f', '\a', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'U', '\t', '\x3', '\x2', '\x2', '\x2', 'V', 'W', 
		'\a', '\x4', '\x2', '\x2', 'W', '\v', '\x3', '\x2', '\x2', '\x2', 'X', 
		'Y', '\a', '\x5', '\x2', '\x2', 'Y', '\r', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\x5', '\x10', '\t', '\x2', '[', '\\', '\x5', '\x12', '\n', 
		'\x2', '\\', '\xF', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x6', 
		'\x2', '\x2', '^', '\x11', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x5', 
		'\x16', '\f', '\x2', '`', '\x62', '\x5', '\x14', '\v', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x13', '\x3', '\x2', '\x2', '\x2', '\x63', 'l', '\a', '\t', '\x2', 
		'\x2', '\x64', 'i', '\x5', '\x4', '\x3', '\x2', '\x65', '\x66', '\a', 
		'\x3', '\x2', '\x2', '\x66', 'h', '\x5', '\x4', '\x3', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 
		'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x64', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\n', '\x2', 
		'\x2', 'o', '\x15', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'q', '\x17', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x5', 
		'\x1A', '\xE', '\x2', 's', 'u', '\x5', '\x1C', '\xF', '\x2', 't', 'r', 
		'\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 
		'\x19', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\a', '\x2', '\x2', 
		'w', '\x1B', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\b', '\x2', 
		'\x2', 'y', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xE', '#', '\x30', '\x39', 
		'=', 'H', 'J', 'P', 'T', '\x61', 'i', 'l', 't',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
