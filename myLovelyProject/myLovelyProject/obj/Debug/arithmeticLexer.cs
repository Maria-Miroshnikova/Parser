//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Чайный Гриб\Programming\проект\myLovelyProject\myLovelyProject\arithmetic.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class arithmeticLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, TRUE=2, FALSE=3, NAMEIDENTIFIER=4, INT=5, DOUBLE=6, LPAREN=7, 
		RPAREN=8, PLUS=9, MINUS=10, TIMES=11, DIV=12, AND=13, OR=14, NOT=15, BOOLEQ=16, 
		POINT=17, SEMI=18, WS=19, UNEXPECTED=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "TRUE", "FALSE", "NAMEIDENTIFIER", "VALID_ID_START", "VALID_ID_CHAR", 
		"VALID_ID_END", "INT", "DOUBLE", "LPAREN", "RPAREN", "PLUS", "MINUS", 
		"TIMES", "DIV", "AND", "OR", "NOT", "BOOLEQ", "POINT", "SEMI", "WS", "UNEXPECTED"
	};


	public arithmeticLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public arithmeticLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'true'", "'false'", null, null, null, "'('", "')'", "'+'", 
		"'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", "'=='", "'.'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "TRUE", "FALSE", "NAMEIDENTIFIER", "INT", "DOUBLE", "LPAREN", 
		"RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "AND", "OR", "NOT", "BOOLEQ", 
		"POINT", "SEMI", "WS", "UNEXPECTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "arithmetic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static arithmeticLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x16', '\x8A', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\x41', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x44', 
		'\v', '\x5', '\x3', '\x5', '\a', '\x5', 'G', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'J', '\v', '\x5', '\x3', '\x6', '\x5', '\x6', 'M', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x6', '\t', 'T', '\n', '\t', '\r', '\t', '\xE', '\t', 'U', '\x3', '\n', 
		'\x6', '\n', 'Y', '\n', '\n', '\r', '\n', '\xE', '\n', 'Z', '\x3', '\n', 
		'\x3', '\n', '\x6', '\n', '_', '\n', '\n', '\r', '\n', '\xE', '\n', '`', 
		'\x6', '\n', '\x63', '\n', '\n', '\r', '\n', '\xE', '\n', '\x64', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x6', '\x17', '\x83', '\n', '\x17', '\r', 
		'\x17', '\xE', '\x17', '\x84', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x2', '\x2', '\x19', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\x2', '\r', '\x2', '\xF', '\x2', '\x11', '\a', 
		'\x13', '\b', '\x15', '\t', '\x17', '\n', '\x19', '\v', '\x1B', '\f', 
		'\x1D', '\r', '\x1F', '\xE', '!', '\xF', '#', '\x10', '%', '\x11', '\'', 
		'\x12', ')', '\x13', '+', '\x14', '-', '\x15', '/', '\x16', '\x3', '\x2', 
		'\x5', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', '\f', 
		'\xF', '\xF', '\"', '\"', '\b', '\x2', '#', '#', '*', '/', '\x31', ';', 
		'=', '=', '\x43', '\\', '\x63', '|', '\x2', '\x8D', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', 
		')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x2', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x31', '\x3', '\x2', '\x2', '\x2', '\x5', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x38', '\x3', '\x2', '\x2', '\x2', '\t', '>', 
		'\x3', '\x2', '\x2', '\x2', '\v', 'L', '\x3', '\x2', '\x2', '\x2', '\r', 
		'N', '\x3', '\x2', '\x2', '\x2', '\xF', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x11', 'S', '\x3', '\x2', '\x2', '\x2', '\x13', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x66', '\x3', '\x2', '\x2', '\x2', '\x17', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x19', 'j', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x1D', 'n', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', 'p', '\x3', '\x2', '\x2', '\x2', '!', 'r', '\x3', '\x2', '\x2', 
		'\x2', '#', 'u', '\x3', '\x2', '\x2', '\x2', '%', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\'', 'z', '\x3', '\x2', '\x2', '\x2', ')', '}', '\x3', '\x2', 
		'\x2', '\x2', '+', '\x7F', '\x3', '\x2', '\x2', '\x2', '-', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x88', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\a', '.', '\x2', '\x2', '\x32', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\a', 'v', '\x2', '\x2', '\x34', '\x35', '\a', 't', '\x2', 
		'\x2', '\x35', '\x36', '\a', 'w', '\x2', '\x2', '\x36', '\x37', '\a', 
		'g', '\x2', '\x2', '\x37', '\x6', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\a', 'h', '\x2', '\x2', '\x39', ':', '\a', '\x63', '\x2', '\x2', 
		':', ';', '\a', 'n', '\x2', '\x2', ';', '<', '\a', 'u', '\x2', '\x2', 
		'<', '=', '\a', 'g', '\x2', '\x2', '=', '\b', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x42', '\x5', '\v', '\x6', '\x2', '?', '\x41', '\x5', '\r', '\a', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', 'H', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x5', '\xF', '\b', '\x2', 
		'\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'I', '\n', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'M', '\t', '\x2', '\x2', '\x2', 'L', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'M', '\f', '\x3', '\x2', '\x2', '\x2', 'N', 'O', 
		'\x5', '\v', '\x6', '\x2', 'O', '\xE', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\x4', '\x32', ';', '\x2', 'Q', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\x4', '\x32', ';', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\x12', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Y', '\x4', '\x32', ';', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\\', '^', '\a', '\x30', '\x2', '\x2', ']', '_', '\x4', 
		'\x32', ';', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', 
		'\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\\', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\a', '*', '\x2', '\x2', 'g', '\x16', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\a', '+', '\x2', '\x2', 'i', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\a', '-', '\x2', '\x2', 'k', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', '/', '\x2', '\x2', 'm', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', ',', '\x2', '\x2', 'o', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\a', '\x31', '\x2', '\x2', 'q', ' ', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '(', '\x2', '\x2', 's', 't', '\a', '(', '\x2', 
		'\x2', 't', '\"', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '~', '\x2', 
		'\x2', 'v', 'w', '\a', '~', '\x2', '\x2', 'w', '$', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '#', '\x2', '\x2', 'y', '&', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '?', '\x2', '\x2', '{', '|', '\a', '?', '\x2', 
		'\x2', '|', '(', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x30', '\x2', 
		'\x2', '~', '*', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '=', 
		'\x2', '\x2', '\x80', ',', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', 
		'\t', '\x3', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\b', '\x17', '\x2', '\x2', 
		'\x87', '.', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\n', '\x4', 
		'\x2', '\x2', '\x89', '\x30', '\x3', '\x2', '\x2', '\x2', '\v', '\x2', 
		'\x42', 'H', 'L', 'U', 'Z', '`', '\x64', '\x84', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
